//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Admin.App.DataAccessLayer.DataModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AdminAppEntities : DbContext
    {
        public AdminAppEntities()
            : base("name=AdminAppEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CompanyDetail> CompanyDetails { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<UserAuthentication> UserAuthentications { get; set; }
        public virtual DbSet<UserDetail> UserDetails { get; set; }
        public virtual DbSet<MenuMaster> MenuMasters { get; set; }
        public virtual DbSet<MenuPrivilege> MenuPrivileges { get; set; }
        public virtual DbSet<CustomerDetail> CustomerDetails { get; set; }
    
        public virtual ObjectResult<usp_GetAllCompany_Result> usp_GetAllCompany()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllCompany_Result>("usp_GetAllCompany");
        }
    
        public virtual ObjectResult<usp_GetAllRoles_Result> usp_GetAllRoles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllRoles_Result>("usp_GetAllRoles");
        }
    
        public virtual ObjectResult<usp_GetCompanyByID_Result> usp_GetCompanyByID(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCompanyByID_Result>("usp_GetCompanyByID", companyIDParameter);
        }
    
        public virtual ObjectResult<usp_GetUserAuthByName_Result> usp_GetUserAuthByName(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetUserAuthByName_Result>("usp_GetUserAuthByName", userIDParameter);
        }
    
        public virtual int usp_SaveNewCompany(string companyName, string primaryMailID, string primaryPhoneNo, string fax, string website, string address, string address1, string city, string state, string country, string pincode, string gSTNO, string imageExt, ObjectParameter myout)
        {
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var primaryMailIDParameter = primaryMailID != null ?
                new ObjectParameter("PrimaryMailID", primaryMailID) :
                new ObjectParameter("PrimaryMailID", typeof(string));
    
            var primaryPhoneNoParameter = primaryPhoneNo != null ?
                new ObjectParameter("PrimaryPhoneNo", primaryPhoneNo) :
                new ObjectParameter("PrimaryPhoneNo", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var pincodeParameter = pincode != null ?
                new ObjectParameter("Pincode", pincode) :
                new ObjectParameter("Pincode", typeof(string));
    
            var gSTNOParameter = gSTNO != null ?
                new ObjectParameter("GSTNO", gSTNO) :
                new ObjectParameter("GSTNO", typeof(string));
    
            var imageExtParameter = imageExt != null ?
                new ObjectParameter("ImageExt", imageExt) :
                new ObjectParameter("ImageExt", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SaveNewCompany", companyNameParameter, primaryMailIDParameter, primaryPhoneNoParameter, faxParameter, websiteParameter, addressParameter, address1Parameter, cityParameter, stateParameter, countryParameter, pincodeParameter, gSTNOParameter, imageExtParameter, myout);
        }
    
        public virtual int usp_SaveRoles(Nullable<bool> active, string name, Nullable<int> roleId, ObjectParameter myout)
        {
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SaveRoles", activeParameter, nameParameter, roleIdParameter, myout);
        }
    
        public virtual int usp_UpdateCompanyDetails(Nullable<int> companyID, string companyName, string primaryMailID, string primaryPhoneNo, string fax, string website, string address, string address1, string city, string state, string country, string pincode, string gSTNO, string imagePath, string imageExt)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var primaryMailIDParameter = primaryMailID != null ?
                new ObjectParameter("PrimaryMailID", primaryMailID) :
                new ObjectParameter("PrimaryMailID", typeof(string));
    
            var primaryPhoneNoParameter = primaryPhoneNo != null ?
                new ObjectParameter("PrimaryPhoneNo", primaryPhoneNo) :
                new ObjectParameter("PrimaryPhoneNo", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var pincodeParameter = pincode != null ?
                new ObjectParameter("Pincode", pincode) :
                new ObjectParameter("Pincode", typeof(string));
    
            var gSTNOParameter = gSTNO != null ?
                new ObjectParameter("GSTNO", gSTNO) :
                new ObjectParameter("GSTNO", typeof(string));
    
            var imagePathParameter = imagePath != null ?
                new ObjectParameter("ImagePath", imagePath) :
                new ObjectParameter("ImagePath", typeof(string));
    
            var imageExtParameter = imageExt != null ?
                new ObjectParameter("ImageExt", imageExt) :
                new ObjectParameter("ImageExt", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateCompanyDetails", companyIDParameter, companyNameParameter, primaryMailIDParameter, primaryPhoneNoParameter, faxParameter, websiteParameter, addressParameter, address1Parameter, cityParameter, stateParameter, countryParameter, pincodeParameter, gSTNOParameter, imagePathParameter, imageExtParameter);
        }
    
        public virtual ObjectResult<usp_ValidateUser_Result> usp_ValidateUser(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ValidateUser_Result>("usp_ValidateUser", userNameParameter, passwordParameter);
        }
    }
}
